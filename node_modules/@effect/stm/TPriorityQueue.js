"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toReadonlyArray = exports.toArray = exports.takeUpTo = exports.takeOption = exports.takeAll = exports.take = exports.size = exports.retainIf = exports.removeIf = exports.peekOption = exports.peek = exports.offerAll = exports.offer = exports.make = exports.isNonEmpty = exports.isEmpty = exports.fromIterable = exports.empty = exports.TPriorityQueueTypeId = void 0;
var internal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stm/internal/tPriorityQueue"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @since 1.0.0
 * @category symbols
 */
const TPriorityQueueTypeId = internal.TPriorityQueueTypeId;
/**
 * Constructs a new empty `TPriorityQueue` with the specified `Order`.
 *
 * @since 1.0.0
 * @category constructors
 */
exports.TPriorityQueueTypeId = TPriorityQueueTypeId;
const empty = internal.empty;
/**
 * Makes a new `TPriorityQueue` initialized with provided iterable.
 *
 * @since 1.0.0
 * @category constructors
 */
exports.empty = empty;
const fromIterable = internal.fromIterable;
/**
 * Checks whether the queue is empty.
 *
 * @since 1.0.0
 * @category getters
 */
exports.fromIterable = fromIterable;
const isEmpty = internal.isEmpty;
/**
 * Checks whether the queue is not empty.
 *
 * @since 1.0.0
 * @category getters
 */
exports.isEmpty = isEmpty;
const isNonEmpty = internal.isNonEmpty;
/**
 * Makes a new `TPriorityQueue` that is initialized with specified values.
 *
 * @since 1.0.0
 * @category constructors
 */
exports.isNonEmpty = isNonEmpty;
const make = internal.make;
/**
 * Offers the specified value to the queue.
 *
 * @since 1.0.0
 * @category mutations
 */
exports.make = make;
const offer = internal.offer;
/**
 * Offers all of the elements in the specified collection to the queue.
 *
 * @since 1.0.0
 * @category mutations
 */
exports.offer = offer;
const offerAll = internal.offerAll;
/**
 * Peeks at the first value in the queue without removing it, retrying until a
 * value is in the queue.
 *
 * @since 1.0.0
 * @category getters
 */
exports.offerAll = offerAll;
const peek = internal.peek;
/**
 * Peeks at the first value in the queue without removing it, returning `None`
 * if there is not a value in the queue.
 *
 * @since 1.0.0
 * @category getters
 */
exports.peek = peek;
const peekOption = internal.peekOption;
/**
 * Removes all elements from the queue matching the specified predicate.
 *
 * @since 1.0.0
 * @category getters
 */
exports.peekOption = peekOption;
const removeIf = internal.removeIf;
/**
 * Retains only elements from the queue matching the specified predicate.
 *
 * @since 1.0.0
 * @category getters
 */
exports.removeIf = removeIf;
const retainIf = internal.retainIf;
/**
 * Returns the size of the queue.
 *
 * @since 1.0.0
 * @category getters
 */
exports.retainIf = retainIf;
const size = internal.size;
/**
 * Takes a value from the queue, retrying until a value is in the queue.
 *
 * @since 1.0.0
 * @category mutations
 */
exports.size = size;
const take = internal.take;
/**
 * Takes all values from the queue.
 *
 * @since 1.0.0
 * @category mutations
 */
exports.take = take;
const takeAll = internal.takeAll;
/**
 * Takes a value from the queue, returning `None` if there is not a value in
 * the queue.
 *
 * @since 1.0.0
 * @category mutations
 */
exports.takeAll = takeAll;
const takeOption = internal.takeOption;
/**
 * Takes up to the specified maximum number of elements from the queue.
 *
 * @since 1.0.0
 * @category mutations
 */
exports.takeOption = takeOption;
const takeUpTo = internal.takeUpTo;
/**
 * Collects all values into a chunk.
 *
 * @since 1.0.0
 * @category destructors
 */
exports.takeUpTo = takeUpTo;
const toArray = internal.toChunk;
/**
 * Collects all values into an array.
 *
 * @since 1.0.0
 * @category destructors
 */
exports.toArray = toArray;
const toReadonlyArray = internal.toReadonlyArray;
exports.toReadonlyArray = toReadonlyArray;
//# sourceMappingURL=TPriorityQueue.js.map