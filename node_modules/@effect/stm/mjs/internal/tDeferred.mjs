var _a;
import * as Either from "@effect/data/Either";
import { dual } from "@effect/data/Function";
import * as Option from "@effect/data/Option";
import * as core from "@effect/stm/internal/core";
import * as stm from "@effect/stm/internal/stm";
import * as tRef from "@effect/stm/internal/tRef";
/** @internal */
const TDeferredSymbolKey = "@effect/stm/TDeferred";
/** @internal */
export const TDeferredTypeId = /*#__PURE__*/Symbol.for(TDeferredSymbolKey);
/** @internal */
const tDeferredVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
class TDeferredImpl {
  constructor(ref) {
    this.ref = ref;
    this[_a] = tDeferredVariance;
  }
}
_a = TDeferredTypeId;
/** @internal */
export const _await = self => stm.flatten(stm.collect(tRef.get(self.ref), option => Option.isSome(option) ? Option.some(stm.fromEither(option.value)) : Option.none()));
/** @internal */
export const done = /*#__PURE__*/dual(2, (self, either) => core.flatMap(tRef.get(self.ref), Option.match({
  onNone: () => core.zipRight(tRef.set(self.ref, Option.some(either)), core.succeed(true)),
  onSome: () => core.succeed(false)
})));
/** @internal */
export const fail = /*#__PURE__*/dual(2, (self, error) => done(self, Either.left(error)));
/** @internal */
export const make = () => core.map(tRef.make(Option.none()), ref => new TDeferredImpl(ref));
/** @internal */
export const poll = self => tRef.get(self.ref);
/** @internal */
export const succeed = /*#__PURE__*/dual(2, (self, value) => done(self, Either.right(value)));
//# sourceMappingURL=tDeferred.mjs.map