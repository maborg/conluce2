import * as Equal from "@effect/data/Equal";
import * as Hash from "@effect/data/Hash";
import * as OpCodes from "@effect/stm/internal/opCodes/tExit";
/** @internal */
const TExitSymbolKey = "@effect/io/TExit";
/** @internal */
export const TExitTypeId = /*#__PURE__*/Symbol.for(TExitSymbolKey);
/** @internal */
const variance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
export const isExit = u => {
  return typeof u === "object" && u != null && TExitTypeId in u;
};
/** @internal */
export const isFail = self => {
  return self._tag === OpCodes.OP_FAIL;
};
/** @internal */
export const isDie = self => {
  return self._tag === OpCodes.OP_DIE;
};
/** @internal */
export const isInterrupt = self => {
  return self._tag === OpCodes.OP_INTERRUPT;
};
/** @internal */
export const isSuccess = self => {
  return self._tag === OpCodes.OP_SUCCEED;
};
/** @internal */
export const isRetry = self => {
  return self._tag === OpCodes.OP_RETRY;
};
/** @internal */
export const fail = error => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_FAIL,
  error,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(error))(Hash.combine(Hash.hash(OpCodes.OP_FAIL))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_FAIL && Equal.equals(error, that.error);
  }
});
/** @internal */
export const die = defect => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_DIE,
  defect,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(defect))(Hash.combine(Hash.hash(OpCodes.OP_DIE))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_DIE && Equal.equals(defect, that.defect);
  }
});
/** @internal */
export const interrupt = fiberId => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_INTERRUPT,
  fiberId,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(fiberId))(Hash.combine(Hash.hash(OpCodes.OP_INTERRUPT))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_INTERRUPT && Equal.equals(fiberId, that.fiberId);
  }
});
/** @internal */
export const succeed = value => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_SUCCEED,
  value,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(value))(Hash.combine(Hash.hash(OpCodes.OP_SUCCEED))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_SUCCEED && Equal.equals(value, that.value);
  }
});
/** @internal */
export const retry = {
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_RETRY,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash("retry"))(Hash.combine(Hash.hash(OpCodes.OP_RETRY))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && isRetry(that);
  }
};
/** @internal */
export const unit = () => succeed(undefined);
//# sourceMappingURL=tExit.mjs.map