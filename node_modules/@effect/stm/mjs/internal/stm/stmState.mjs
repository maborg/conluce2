import * as Equal from "@effect/data/Equal";
import * as Hash from "@effect/data/Hash";
import * as Exit from "@effect/io/Exit";
import * as OpCodes from "@effect/stm/internal/opCodes/stmState";
import * as TExitOpCodes from "@effect/stm/internal/opCodes/tExit";
/** @internal */
const STMStateSymbolKey = "@effect/io/STM/State";
/** @internal */
export const STMStateTypeId = /*#__PURE__*/Symbol.for(STMStateSymbolKey);
/** @internal */
export const isSTMState = u => {
  return typeof u === "object" && u != null && STMStateTypeId in u;
};
/** @internal */
export const isRunning = self => {
  return self._tag === OpCodes.OP_RUNNING;
};
/** @internal */
export const isDone = self => {
  return self._tag === OpCodes.OP_DONE;
};
/** @internal */
export const isInterrupted = self => {
  return self._tag === OpCodes.OP_INTERRUPTED;
};
/** @internal */
export const done = exit => {
  return {
    [STMStateTypeId]: STMStateTypeId,
    _tag: OpCodes.OP_DONE,
    exit,
    [Hash.symbol]() {
      return Hash.combine(Hash.hash(exit))(Hash.combine(Hash.hash(OpCodes.OP_DONE))(Hash.hash(STMStateSymbolKey)));
    },
    [Equal.symbol](that) {
      return isSTMState(that) && that._tag === OpCodes.OP_DONE && Equal.equals(exit, that.exit);
    }
  };
};
/** @internal */
export const interrupted = {
  [STMStateTypeId]: STMStateTypeId,
  _tag: OpCodes.OP_INTERRUPTED,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash("interrupted"))(Hash.combine(Hash.hash(OpCodes.OP_INTERRUPTED))(Hash.hash(STMStateSymbolKey)));
  },
  [Equal.symbol](that) {
    return isSTMState(that) && that._tag === OpCodes.OP_INTERRUPTED;
  }
};
/** @internal */
export const running = {
  [STMStateTypeId]: STMStateTypeId,
  _tag: OpCodes.OP_RUNNING,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash("running"))(Hash.combine(Hash.hash(OpCodes.OP_RUNNING))(Hash.hash(STMStateSymbolKey)));
  },
  [Equal.symbol](that) {
    return isSTMState(that) && that._tag === OpCodes.OP_RUNNING;
  }
};
/** @internal */
export const fromTExit = tExit => {
  switch (tExit._tag) {
    case TExitOpCodes.OP_FAIL:
      {
        return done(Exit.fail(tExit.error));
      }
    case TExitOpCodes.OP_DIE:
      {
        return done(Exit.die(tExit.defect));
      }
    case TExitOpCodes.OP_INTERRUPT:
      {
        return done(Exit.interrupt(tExit.fiberId));
      }
    case TExitOpCodes.OP_SUCCEED:
      {
        return done(Exit.succeed(tExit.value));
      }
    case TExitOpCodes.OP_RETRY:
      {
        throw new Error("BUG: STM.STMState.fromTExit - please report an issue at https://github.com/Effect-TS/io/issues");
      }
  }
};
//# sourceMappingURL=stmState.mjs.map