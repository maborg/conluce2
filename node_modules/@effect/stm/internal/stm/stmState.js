"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.running = exports.isSTMState = exports.isRunning = exports.isInterrupted = exports.isDone = exports.interrupted = exports.fromTExit = exports.done = exports.STMStateTypeId = void 0;
var Equal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Equal"));
var Hash = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Hash"));
var Exit = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/Exit"));
var OpCodes = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stm/internal/opCodes/stmState"));
var TExitOpCodes = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stm/internal/opCodes/tExit"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @internal */
const STMStateSymbolKey = "@effect/io/STM/State";
/** @internal */
const STMStateTypeId = /*#__PURE__*/Symbol.for(STMStateSymbolKey);
/** @internal */
exports.STMStateTypeId = STMStateTypeId;
const isSTMState = u => {
  return typeof u === "object" && u != null && STMStateTypeId in u;
};
/** @internal */
exports.isSTMState = isSTMState;
const isRunning = self => {
  return self._tag === OpCodes.OP_RUNNING;
};
/** @internal */
exports.isRunning = isRunning;
const isDone = self => {
  return self._tag === OpCodes.OP_DONE;
};
/** @internal */
exports.isDone = isDone;
const isInterrupted = self => {
  return self._tag === OpCodes.OP_INTERRUPTED;
};
/** @internal */
exports.isInterrupted = isInterrupted;
const done = exit => {
  return {
    [STMStateTypeId]: STMStateTypeId,
    _tag: OpCodes.OP_DONE,
    exit,
    [Hash.symbol]() {
      return Hash.combine(Hash.hash(exit))(Hash.combine(Hash.hash(OpCodes.OP_DONE))(Hash.hash(STMStateSymbolKey)));
    },
    [Equal.symbol](that) {
      return isSTMState(that) && that._tag === OpCodes.OP_DONE && Equal.equals(exit, that.exit);
    }
  };
};
/** @internal */
exports.done = done;
const interrupted = {
  [STMStateTypeId]: STMStateTypeId,
  _tag: OpCodes.OP_INTERRUPTED,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash("interrupted"))(Hash.combine(Hash.hash(OpCodes.OP_INTERRUPTED))(Hash.hash(STMStateSymbolKey)));
  },
  [Equal.symbol](that) {
    return isSTMState(that) && that._tag === OpCodes.OP_INTERRUPTED;
  }
};
/** @internal */
exports.interrupted = interrupted;
const running = {
  [STMStateTypeId]: STMStateTypeId,
  _tag: OpCodes.OP_RUNNING,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash("running"))(Hash.combine(Hash.hash(OpCodes.OP_RUNNING))(Hash.hash(STMStateSymbolKey)));
  },
  [Equal.symbol](that) {
    return isSTMState(that) && that._tag === OpCodes.OP_RUNNING;
  }
};
/** @internal */
exports.running = running;
const fromTExit = tExit => {
  switch (tExit._tag) {
    case TExitOpCodes.OP_FAIL:
      {
        return done(Exit.fail(tExit.error));
      }
    case TExitOpCodes.OP_DIE:
      {
        return done(Exit.die(tExit.defect));
      }
    case TExitOpCodes.OP_INTERRUPT:
      {
        return done(Exit.interrupt(tExit.fiberId));
      }
    case TExitOpCodes.OP_SUCCEED:
      {
        return done(Exit.succeed(tExit.value));
      }
    case TExitOpCodes.OP_RETRY:
      {
        throw new Error("BUG: STM.STMState.fromTExit - please report an issue at https://github.com/Effect-TS/io/issues");
      }
  }
};
exports.fromTExit = fromTExit;
//# sourceMappingURL=stmState.js.map