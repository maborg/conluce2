"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unit = exports.succeed = exports.retry = exports.isSuccess = exports.isRetry = exports.isInterrupt = exports.isFail = exports.isExit = exports.isDie = exports.interrupt = exports.fail = exports.die = exports.TExitTypeId = void 0;
var Equal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Equal"));
var Hash = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Hash"));
var OpCodes = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stm/internal/opCodes/tExit"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @internal */
const TExitSymbolKey = "@effect/io/TExit";
/** @internal */
const TExitTypeId = /*#__PURE__*/Symbol.for(TExitSymbolKey);
/** @internal */
exports.TExitTypeId = TExitTypeId;
const variance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
const isExit = u => {
  return typeof u === "object" && u != null && TExitTypeId in u;
};
/** @internal */
exports.isExit = isExit;
const isFail = self => {
  return self._tag === OpCodes.OP_FAIL;
};
/** @internal */
exports.isFail = isFail;
const isDie = self => {
  return self._tag === OpCodes.OP_DIE;
};
/** @internal */
exports.isDie = isDie;
const isInterrupt = self => {
  return self._tag === OpCodes.OP_INTERRUPT;
};
/** @internal */
exports.isInterrupt = isInterrupt;
const isSuccess = self => {
  return self._tag === OpCodes.OP_SUCCEED;
};
/** @internal */
exports.isSuccess = isSuccess;
const isRetry = self => {
  return self._tag === OpCodes.OP_RETRY;
};
/** @internal */
exports.isRetry = isRetry;
const fail = error => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_FAIL,
  error,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(error))(Hash.combine(Hash.hash(OpCodes.OP_FAIL))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_FAIL && Equal.equals(error, that.error);
  }
});
/** @internal */
exports.fail = fail;
const die = defect => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_DIE,
  defect,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(defect))(Hash.combine(Hash.hash(OpCodes.OP_DIE))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_DIE && Equal.equals(defect, that.defect);
  }
});
/** @internal */
exports.die = die;
const interrupt = fiberId => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_INTERRUPT,
  fiberId,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(fiberId))(Hash.combine(Hash.hash(OpCodes.OP_INTERRUPT))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_INTERRUPT && Equal.equals(fiberId, that.fiberId);
  }
});
/** @internal */
exports.interrupt = interrupt;
const succeed = value => ({
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_SUCCEED,
  value,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash(value))(Hash.combine(Hash.hash(OpCodes.OP_SUCCEED))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && that._tag === OpCodes.OP_SUCCEED && Equal.equals(value, that.value);
  }
});
/** @internal */
exports.succeed = succeed;
const retry = {
  [TExitTypeId]: variance,
  _tag: OpCodes.OP_RETRY,
  [Hash.symbol]() {
    return Hash.combine(Hash.hash("retry"))(Hash.combine(Hash.hash(OpCodes.OP_RETRY))(Hash.hash(TExitSymbolKey)));
  },
  [Equal.symbol](that) {
    return isExit(that) && isRetry(that);
  }
};
/** @internal */
exports.retry = retry;
const unit = () => succeed(undefined);
exports.unit = unit;
//# sourceMappingURL=tExit.js.map