"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromDequeue = exports.failCause = exports.fail = exports.end = exports.empty = exports.emitChunk = exports.emit = void 0;
var Chunk = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Chunk"));
var Option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Option"));
var Effect = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/Effect"));
var Queue = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/Queue"));
var take = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/stream/internal/take"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** @internal */
const emit = value => Effect.succeed(Chunk.of(value));
/** @internal */
exports.emit = emit;
const emitChunk = chunk => Effect.succeed(chunk);
/** @internal */
exports.emitChunk = emitChunk;
const empty = () => Effect.succeed(Chunk.empty());
/** @internal */
exports.empty = empty;
const end = () => Effect.fail(Option.none());
/** @internal */
exports.end = end;
const fail = error => Effect.fail(Option.some(error));
/** @internal */
exports.fail = fail;
const failCause = cause => Effect.mapError(Effect.failCause(cause), Option.some);
/** @internal */
exports.failCause = failCause;
const fromDequeue = dequeue => Effect.flatMap(Queue.take(dequeue), take.done);
exports.fromDequeue = fromDequeue;
//# sourceMappingURL=pull.js.map